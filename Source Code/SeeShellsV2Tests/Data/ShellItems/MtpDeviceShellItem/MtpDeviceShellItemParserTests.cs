using Microsoft.VisualStudio.TestTools.UnitTesting;
using SeeShellsV2.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SeeShellsV2.Data.Tests
{
    [TestClass()]
    public class MtpDeviceShellItemParserTests
    {
        [TestMethod()]
        public void ParseTest()
        {
            byte[] buf = new byte[] {
                0x84, 0x01, 0x2E, 0x00, 0x5E, 0x01, 0x06, 0x20,
                0x31, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x00,
                0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0B, 0x00,
                0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x41, 0x00, 0x70, 0x00, 0x70, 0x00, 0x6C, 0x00,
                0x65, 0x00, 0x20, 0x00, 0x69, 0x00, 0x50, 0x00,
                0x6F, 0x00, 0x64, 0x00, 0x00, 0x00, 0x5C, 0x00,
                0x5C, 0x00, 0x3F, 0x00, 0x5C, 0x00, 0x75, 0x00,
                0x73, 0x00, 0x62, 0x00, 0x23, 0x00, 0x76, 0x00,
                0x69, 0x00, 0x64, 0x00, 0x5F, 0x00, 0x30, 0x00,
                0x35, 0x00, 0x61, 0x00, 0x63, 0x00, 0x26, 0x00,
                0x70, 0x00, 0x69, 0x00, 0x64, 0x00, 0x5F, 0x00,
                0x31, 0x00, 0x32, 0x00, 0x39, 0x00, 0x65, 0x00,
                0x26, 0x00, 0x6D, 0x00, 0x69, 0x00, 0x5F, 0x00,
                0x30, 0x00, 0x30, 0x00, 0x23, 0x00, 0x36, 0x00,
                0x26, 0x00, 0x32, 0x00, 0x37, 0x00, 0x34, 0x00,
                0x66, 0x00, 0x38, 0x00, 0x61, 0x00, 0x37, 0x00,
                0x39, 0x00, 0x26, 0x00, 0x30, 0x00, 0x26, 0x00,
                0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
                0x23, 0x00, 0x7B, 0x00, 0x36, 0x00, 0x61, 0x00,
                0x63, 0x00, 0x32, 0x00, 0x37, 0x00, 0x38, 0x00,
                0x37, 0x00, 0x38, 0x00, 0x2D, 0x00, 0x61, 0x00,
                0x36, 0x00, 0x66, 0x00, 0x61, 0x00, 0x2D, 0x00,
                0x34, 0x00, 0x31, 0x00, 0x35, 0x00, 0x35, 0x00,
                0x2D, 0x00, 0x62, 0x00, 0x61, 0x00, 0x38, 0x00,
                0x35, 0x00, 0x2D, 0x00, 0x66, 0x00, 0x39, 0x00,
                0x38, 0x00, 0x66, 0x00, 0x34, 0x00, 0x39, 0x00,
                0x31, 0x00, 0x64, 0x00, 0x34, 0x00, 0x66, 0x00,
                0x33, 0x00, 0x33, 0x00, 0x7D, 0x00, 0x00, 0x00,
                0x0D, 0x00, 0x00, 0x00, 0x03, 0xD5, 0x15, 0x0C,
                0x17, 0xD0, 0xCE, 0x47, 0x90, 0x16, 0x7B, 0x3F,
                0x97, 0x87, 0x21, 0xCC, 0x02, 0x00, 0x00, 0x00,
                0x9A, 0x97, 0xD4, 0x26, 0x43, 0xE6, 0x26, 0x46,
                0x9E, 0x2B, 0x73, 0x6D, 0xC0, 0xC9, 0x2F, 0xDC,
                0x0C, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,
                0x16, 0x00, 0x00, 0x00, 0x41, 0x00, 0x70, 0x00,
                0x70, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00,
                0x69, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x64, 0x00,
                0x00, 0x00, 0x93, 0x2D, 0x05, 0x8F, 0xCA, 0xAB,
                0xC5, 0x4F, 0xA5, 0xAC, 0xB0, 0x1D, 0xF4, 0xDB,
                0xE5, 0x98, 0x02, 0x00, 0x00, 0x00, 0x48, 0x00,
                0x00, 0x00, 0x6B, 0x46, 0xEA, 0x08, 0xA4, 0xE3,
                0x36, 0x43, 0xA1, 0xF3, 0xA4, 0x4D, 0x2B, 0x5C,
                0x43, 0x8C, 0x00, 0x00, 0x74, 0x1A, 0x59, 0x5E,
                0x96, 0xDF, 0xD3, 0x48, 0x8D, 0x67, 0x17, 0x33,
                0xBC, 0xEE, 0x28, 0xBA, 0x3C, 0x6D, 0x78, 0x35,
                0x75, 0xB0, 0xB9, 0x49, 0x88, 0xDD, 0x02, 0x98,
                0x76, 0xE1, 0x1C, 0x01, 0x00, 0x00
            };

            MtpDeviceShellItemParser parser = new MtpDeviceShellItemParser();

            MtpDeviceShellItem item = parser.Parse(null, null, buf) as MtpDeviceShellItem;

            Assert.IsTrue(item.Fields.Count == 12);

            Assert.IsTrue(item.Fields.ContainsKey("Size"));
            Assert.IsTrue(item.Fields.ContainsKey("Signature"));
            Assert.IsTrue(item.Fields.ContainsKey("TypeName"));
            Assert.IsTrue(item.Fields.ContainsKey("SubtypeName"));
            Assert.IsTrue(item.Fields.ContainsKey("Place"));
            Assert.IsTrue(item.Fields.ContainsKey("InternalDevicePath"));
            Assert.IsTrue(item.Fields.ContainsKey("Description"));

            Assert.IsTrue(item.Fields["Size"] as ushort? == item.Size);
            Assert.IsTrue(item.Fields["Signature"] as uint? == item.Signature);
            Assert.IsTrue(item.Fields["TypeName"] as string == item.TypeName);
            Assert.IsTrue(item.Fields["SubtypeName"] as string == item.SubtypeName);
            Assert.IsTrue(item.Fields["Place"] as Place == item.Place);
            Assert.IsTrue(item.Fields["InternalDevicePath"] as string == item.InternalDevicePath);
            Assert.IsTrue(item.Fields["Description"] as string == item.Description);

            Assert.IsTrue(item.Size == 388);
            Assert.IsTrue(item.Signature == 0x08312006);
            Assert.IsTrue(item.TypeName == "Media Transfer Protocol");
            Assert.IsTrue(item.SubtypeName == "Device");
            Assert.IsTrue(item.Place.Name == "Apple iPod");
            Assert.IsTrue(item.InternalDevicePath == "\\\\?\\usb#vid_05ac&pid_129e&mi_00#6&274f8a79&0&0000#{6ac27878-a6fa-4155-ba85-f98f491d4f33}");
            Assert.IsTrue(item.Description == "Apple iPod");
        }
    }
}